rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isMember() {
      return isSignedIn() && request.auth.token.role == 'member';
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role in ['admin', 'branch_manager', 'treasurer', 'accountant', 'teller', 'auditor'];
    }
    
    function isTeller() {
       return isSignedIn() && request.auth.token.role in ['admin', 'branch_manager', 'teller'];
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- User & Application Rules ---
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create, delete: if false; // Should only be done by admin backend
    }

    match /applications/{appId} {
      allow create: if true; // Public signup
      allow read, update, delete: if isAdmin();
    }
    
    // --- Settings Rules ---
    match /settings/{docId} {
        allow read: if isSignedIn(); // All logged in users can read settings
        allow write: if isAdmin();
    }

    match /branches/{branchId} {
        allow read: if isSignedIn();
        allow write, delete: if isAdmin();
    }

    match /holidays/{holidayId} {
        allow read: if isSignedIn();
        allow write, delete: if isAdmin();
    }

    // --- Savings Rules ---
    match /savingsSchemes/{schemeId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /savingsApplications/{appId} {
      allow create: if isMember();
      allow read, update: if isAdmin();
    }

    match /savingsAccounts/{accountId} {
      allow read: if (isSignedIn() && isOwner(request.resource.data.userId)) || isAdmin();
      allow create, update: if isAdmin(); // Only admins/tellers create/update accounts via backend
    }

    // --- Deposit Rules ---
    match /depositProducts/{productId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /depositApplications/{appId} {
      allow create: if isMember();
      allow read, update: if isAdmin();
    }
    
    match /activeDeposits/{depositId} {
      allow read: if (isSignedIn() && isOwner(request.resource.data.userId)) || isAdmin();
      allow create, update: if isAdmin();
    }
    
    // --- Loan Rules ---
    match /loanProducts/{productId} {
        allow read: if isSignedIn();
        allow write: if isAdmin();
    }
    
    match /loanApplications/{appId} {
        allow create: if isMember();
        allow read, update: if isAdmin();
    }
    
    match /activeLoans/{loanId} {
        allow read: if (isSignedIn() && isOwner(request.resource.data.userId)) || isAdmin();
        allow create, update: if isAdmin();
    }

    // --- Transaction Rules ---
    match /transactions/{transactionId} {
      allow read: if (isSignedIn() && isOwner(request.resource.data.userId)) || isAdmin();
      allow create: if isTeller(); // Only tellers/admins can create transactions
      allow update, delete: if false; // Transactions should be immutable
    }
    
    // --- Accounting Rules (Strictly Admin) ---
    match /chartOfAccounts/{accountId} {
        allow read, write: if isAdmin();
    }
    
    match /journalEntries/{entryId} {
        allow read, write: if isAdmin();
    }

    // --- Notification Rules ---
    match /notifications/{notificationId} {
      // Anyone can read global notifications
      // Users can read notifications targeted to them
      allow read: if isSignedIn() && (resource.data.target == 'all' || resource.data.userId == request.auth.uid);
      allow write: if isAdmin();
    }
    
    // --- Support Ticket Rules ---
    match /supportTickets/{ticketId} {
        allow create: if isMember();
        allow read, update: if (isSignedIn() && isOwner(request.resource.data.userId)) || isAdmin();
    }
  }
}
