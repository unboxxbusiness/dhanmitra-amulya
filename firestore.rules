rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuth() && request.auth.token.role in ['admin', 'branch_manager', 'auditor', 'treasurer', 'accountant'];
    }

    function isTeller() {
        return isAuth() && request.auth.token.role in ['admin', 'teller'];
    }
    
    function isMember() {
      return isAuth() && request.auth.token.role == 'member';
    }

    // --- User & Application Data ---

    match /users/{userId} {
      // Admins can read/write any profile. Members can read/update their own.
      allow read, update: isAdmin() || isOwner(userId);
      // Let the backend `addMember` and `approveApplication` functions handle creation logic.
      allow create: isAuth();
      // Only admins can delete users.
      allow delete: isAdmin();
    }
    
    match /applications/{appId} {
        // Anyone can create a membership application.
        allow create: true;
        // Only admins can read or update (approve/reject) applications.
        allow read, update, delete: isAdmin();
    }


    // --- Products (Read-only for Members) ---

    match /loanProducts/{productId} {
      // Any authenticated user can see the available products.
      allow get, list: isAuth();
      // Only admins can create, update, or delete products.
      allow write: isAdmin();
    }
    
    match /depositProducts/{productId} {
      allow get, list: isAuth();
      allow write: isAdmin();
    }

    match /savingsSchemes/{schemeId} {
      allow get, list: isAuth();
      allow write: isAdmin();
    }


    // --- Member-Owned Documents ---

    match /loanApplications/{appId} {
        // A member can create and read their own applications.
        allow create, get, list: isOwner(resource.data.userId);
        // Admins can manage all applications.
        allow read, update, delete: isAdmin();
    }

    match /depositApplications/{appId} {
        allow create, get, list: isOwner(resource.data.userId);
        allow read, update, delete: isAdmin();
    }
    
    match /savingsApplications/{appId} {
        allow create, get, list: isOwner(resource.data.userId);
        allow read, update, delete: isAdmin();
    }
    
    match /activeLoans/{loanId} {
        // A member can only read their own active loan data.
        allow get, list: isOwner(resource.data.userId);
        // Admins can manage all active loans.
        allow read, update, delete: isAdmin();
    }
    
     match /activeDeposits/{depositId} {
        allow get, list: isOwner(resource.data.userId);
        allow read, update, delete: isAdmin();
    }

    match /savingsAccounts/{accountId} {
        // A user can only see their own savings accounts.
        allow get, list: isOwner(resource.data.userId);
        // Admins can manage all savings accounts.
        allow read, write: isAdmin();
    }
    
    match /transactions/{txId} {
        // A user can read their own transactions. Tellers can create transactions for anyone.
        allow get, list: isOwner(resource.data.userId);
        allow create: isTeller();
        // Only full admins can update/delete historical transactions.
        allow update, delete: isAdmin();
    }
    
    match /supportTickets/{ticketId} {
      // A user can create/read/update their own tickets.
      allow create: isAuth();
      allow get, list, update: isOwner(resource.data.userId) || isAdmin();
      // Only admins can delete tickets.
      allow delete: isAdmin();
    }
    
    match /notifications/{notificationId} {
      // Users can read their own notifications and global ones.
      allow get: isAuth();
      allow list: isAuth() && (
        (request.query.where.size() == 2 && request.query.where[0].field == 'userId' && request.query.where[0].value == request.auth.uid) ||
        (request.query.where.size() == 2 && request.query.where[0].field == 'target' && request.query.where[0].value == 'all')
      );
      // Only admins can create/delete notifications.
      allow write: isAdmin();
    }


    // --- Admin-Only Collections ---
    
    match /chartOfAccounts/{accountId} {
      allow read, write: isAdmin();
    }
    
    match /journalEntries/{entryId} {
      allow read, write: isAdmin();
    }
    
    match /settings/{docId} {
        // Any authenticated user can read settings (e.g., for UPI ID)
        allow get, list: isAuth();
        allow write: isAdmin();
    }
    
    match /branches/{branchId} {
        allow read, write: isAdmin();
    }
    
    match /holidays/{holidayId} {
        // Any authenticated user can read the holiday list.
        allow get, list: isAuth();
        allow write: isAdmin();
    }
    
  }
}
